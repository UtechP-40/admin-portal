name: Admin Portal CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: [ 'admin-portal/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'admin-portal/**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: admin-portal/package-lock.json
    
    - name: Install dependencies
      working-directory: admin-portal
      run: npm ci
    
    - name: Type check
      working-directory: admin-portal
      run: npm run type-check
    
    - name: Lint
      working-directory: admin-portal
      run: npm run lint
    
    - name: Security lint
      working-directory: admin-portal
      run: npm run lint:security
    
    - name: Format check
      working-directory: admin-portal
      run: npm run format:check
    
    - name: Unit tests
      working-directory: admin-portal
      run: npm run test:run
    
    - name: Coverage
      working-directory: admin-portal
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: admin-portal/coverage/coverage-final.json
        flags: admin-portal
        name: admin-portal-coverage

  accessibility-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: admin-portal/package-lock.json
    
    - name: Install dependencies
      working-directory: admin-portal
      run: npm ci
    
    - name: Accessibility tests
      working-directory: admin-portal
      run: npm run test:accessibility

  e2e-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: admin-portal/package-lock.json
    
    - name: Install dependencies
      working-directory: admin-portal
      run: npm ci
    
    - name: Install backend dependencies
      working-directory: backend
      run: npm ci
    
    - name: Start backend server
      working-directory: backend
      run: npm run dev:admin &
      
    - name: Wait for backend
      run: npx wait-on http://localhost:4000/health
    
    - name: Build admin portal
      working-directory: admin-portal
      run: npm run build
    
    - name: Start admin portal
      working-directory: admin-portal
      run: npm run preview &
    
    - name: Wait for admin portal
      run: npx wait-on http://localhost:5173
    
    - name: Run Cypress tests
      working-directory: admin-portal
      run: npm run test:e2e
    
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: admin-portal/cypress/screenshots
    
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: admin-portal/cypress/videos

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: admin-portal/package-lock.json
    
    - name: Install dependencies
      working-directory: admin-portal
      run: npm ci
    
    - name: Build admin portal
      working-directory: admin-portal
      run: npm run build
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli
    
    - name: Run Lighthouse CI
      working-directory: admin-portal
      run: lhci autorun --config=src/test/performance/lighthouse.config.js

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: admin-portal/package-lock.json
    
    - name: Install dependencies
      working-directory: admin-portal
      run: npm ci
    
    - name: Security audit
      working-directory: admin-portal
      run: npm audit --audit-level=moderate
    
    - name: Security tests
      working-directory: admin-portal
      run: npm run test:security

  build:
    runs-on: ubuntu-latest
    needs: [test, accessibility-test, e2e-test, performance-test, security-audit]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: admin-portal/package-lock.json
    
    - name: Install dependencies
      working-directory: admin-portal
      run: npm ci
    
    - name: Build
      working-directory: admin-portal
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: admin-portal-build
        path: admin-portal/dist

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: admin-portal-build
        path: admin-portal/dist
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, AWS S3, Docker, etc.
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke test commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: admin-portal-build
        path: admin-portal/dist
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on production..."
        # Add smoke test commands here
    
    - name: Notify deployment
      run: |
        echo "Admin portal deployed successfully to production"
        # Add notification logic (Slack, email, etc.)

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          for (const artifact of artifacts.data.artifacts) {
            if (artifact.name === 'admin-portal-build') {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }
          }